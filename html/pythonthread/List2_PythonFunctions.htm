<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!HomePAge=http://chernic.github.io/html/pythonthread>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
</head>
<html lang='zh-CN' xml:lang='zh-CN' xmlns='http://www.w3.org/1999/xhtml'>
	<body>
		<h1>
			<a href="./List3_PythonOracle.htm" 
			target="_blank">3.PythonOracle</a>
		</h1>
		<h1>
			<a href="./List2_PythonFunctions.htm" 
			target="_blank">2.Python基本函数</a>
		</h1>
		<h1>
			<a href="./List1_Threadpool.htm" 
			target="_blank">1.Python线程池</a>
		</h1>
		<h1>
			<a href="./List0_MethodNew.htm" 
			target="_blank">0.Python新方法</a>
		</h1>
<!-- The End of Head -->
		<h4>			
		    <a href="http://www.ibaiyang.org/2012/12/04/generating-python-bindings-for-c-and-c-libraries/" 
			target="_blank">让python和C/C++联姻</a>
			SIP。官方解释是SIP is a tool for automatically generating Python bindings for C and C++ libraries
		</h4>
		<h3>python.Twisted入门</h3>
		<h4>			
		    <a href="http://blog.sina.com.cn/s/blog_704b6af70100py9n.html" 
			target="_blank">我看到的最棒的 Twisted 入门教程！</a>
			学校一个项目中使用Twisted，学习过程中，看到Dave写的这个系列，使我耳目一新。
			看完一遍后，很想把这个系列和众多Python爱好者分享，于是将这个系列翻译出来的想法就冒出来了
		</h4>
<h2>python.函数</h2>
		<h3>Python.yield</h3>
		<h4>			
		    <a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/" 
			target="_blank">Python yield 使用浅析</a>
			只有Python 2.5以上版本才支持这个语法
		</h4>
		<h3>Python.@</h3>
		<h4>			
		    <a href="http://blog.csdn.net/ablo_zhou/article/details/5471952" 
			target="_blank">python 中的@符号</a>
			不像C++这样的一开始就有严格静态的类型定义。
			需要这样的类型检查，那么可以采用＠修饰的方式
		</h4>
		<h3>Python.@contextlib.contextmanager</h3>
		<h4>			
		    <a href="http://www.cnblogs.com/lailailai/p/3893964.html" 
			target="_blank">Python contextlib.contextmanager</a>
			也就是说用了contextmanager装饰器的generator，yield语句之前的部分会在进入with的语句块之前执行
			（generator生成过程,generator函数开始到yield之间的部分），
			yield的值可以用于with中的as来定义个语句块内的变量。
			yield的值相当于是__enter__函数的返回，而yield语句后面部分将会在with语句块退出时执行，
			相当在__exit__函数中执行。
		</h4>
		<h2>append()</h2>
		<h4>11
		</h4>
		<h2>extend()</h2>
		<h4>22
		</h4>
		<h2>pop()</h2>
		<h4>汇编语言指令：出栈
		</h4>
	</body>
</html>
<!-- Generated by Chernic.Y.Chen -->